diff --git a/lib/AST/ExprConstant.cpp b/lib/AST/ExprConstant.cpp
index ed749cc..63526d5 100644
--- a/lib/AST/ExprConstant.cpp
+++ b/lib/AST/ExprConstant.cpp
@@ -47,6 +47,7 @@
 #include "llvm/Support/raw_ostream.h"
 #include <cstring>
 #include <functional>
+#include <limits>
 
 using namespace clang;
 using llvm::APSInt;
@@ -7681,6 +7682,58 @@ bool FloatExprEvaluator::VisitCallExpr(const CallExpr *E) {
     Result.copySign(RHS);
     return true;
   }
+  
+  case Builtin::BI__builtin_round:
+  case Builtin::BI__builtin_roundf:
+  case Builtin::BI__builtin_roundl: {
+    if (!EvaluateFloat(E->getArg(0), Result, Info))
+      return false;
+    Result.roundToIntegral(APFloat::rmNearestTiesToAway);
+    return true;
+  }
+  
+  case Builtin::BI__builtin_fmax:
+  case Builtin::BI__builtin_fmaxf:
+  case Builtin::BI__builtin_fmaxl: {
+    APFloat LHS(0.);
+    APFloat RHS(0.);
+    if (!EvaluateFloat(E->getArg(0), LHS, Info) ||
+        !EvaluateFloat(E->getArg(1), RHS, Info))
+      return false;
+    Result = maxnum(LHS, RHS);
+    return true;
+  }
+  
+  case Builtin::BI__builtin_fmin:
+  case Builtin::BI__builtin_fminf:
+  case Builtin::BI__builtin_fminl: {
+    APFloat LHS(0.);
+    APFloat RHS(0.);
+    if (!EvaluateFloat(E->getArg(0), LHS, Info) ||
+        !EvaluateFloat(E->getArg(1), RHS, Info))
+      return false;
+    Result = minnum(LHS, RHS);
+    return true;
+  }
+  
+  case Builtin::BI__builtin_ldexp:
+  case Builtin::BI__builtin_ldexpf:
+  case Builtin::BI__builtin_ldexpl: {
+    APSInt Exponent;
+    if (!EvaluateFloat(E->getArg(0), Result, Info) ||
+        !EvaluateInteger(E->getArg(1), Exponent, Info))
+      return false;
+    int IntExponent;
+    if (Exponent.getMinSignedBits() > std::numeric_limits<int>::digits + 1) {
+      IntExponent = Exponent.isNegative() ?
+        std::numeric_limits<int>::min() : std::numeric_limits<int>::max();
+    } else {
+      IntExponent = Exponent.getSExtValue();
+    }
+    Result = scalbn(Result, IntExponent);
+    return true;
+  }
+  
   }
 }
 
