include_guard "http_server"

template http_server {
    value(_arg0) options_map;
    objref_arg(_arg1) request_handler;
    
    # Prepare options for consumption.
    If (@true) {
        options_map->get("listen_addr") listen_addr;
        options_map->get("max_clients") max_clients;
        options_map->get("max_headers") max_headers;
        options_map->get("max_line_len") max_line_len;
        options_map->get("max_request_payload_len") max_request_payload_len;
        options_map->get("supported_methods") supported_methods;
        options_map->get("server_name") server_name;
    } options;
    
    # This is the list of connected clients.
    # We use it to enforce the max-clients limit.
    value({}) clients;
    
    # Set up the TCP listener.
    sys.listen({@tcp, options.listen_addr}, @_http_client_proc, {});
}

template _http_client_proc {
    objref(^_caller.options) options;
    objref(^_caller.clients) clients;
    alias(@_socket) socket;
    
    # Informational messages for client connect/disconnect.
    var(@concat(@encode_value(socket.client_addr), ": ")) prefix;
    log_fr(@notice, {prefix, "Connected"}, {prefix, "Disconnected"});
    
    # Enforce max clients limit.
    If (@num_greater_equal(clients.length, options.max_clients)) {
        log(@warning, prefix, "Too many clients");
        socket->close();
    };
    
    # Keep track of all connected clients.
    clients->insert_undo(["addr": socket.client_addr]) clients_entry;
    
    # Depend scope for communication with the request processing task.
    depend_scope() depsc;
    
    # Spawn the request processing task.
    spawn(@_http_request_task, {});
    
    # Line splitting buffer.
    value("") line_buffer;
    
    # Current parsing mode (line or fixed-length).
    var(@false) parsing_fixed_length;
    var("0") the_fixed_length;
    
    # Will backtrack here to read from socket again.
    backtrack_point() read_again;
    
    # Read some data from the socket.
    socket->read() read_data;
    If (read_data.eof) {
        socket->close();
    };
    
    # This holds the unparsed data. Will reduce it as we parse lines.
    var(read_data) unparsed_data;
    
    # Will backtrack here to look for more lines.
    backtrack_point() line_processed;
    
    If (parsing_fixed_length) {
        # Calculate how much more data we want.
        var(@num_subtract(the_fixed_length, line_buffer.length)) remaining;
        
        # Append no more than the remaining amount to the line_buffer.
        substr(unparsed_data, "0", remaining) new_data;
        value(new_data) new_data;
        line_buffer->append(new_data);
        
        # Remove this data from the unparsed_data.
        substr(unparsed_data, new_data.length) rem_data;
        unparsed_data->set(rem_data);
        
        # If not enough data yet, read again.
        If (@num_lesser(line_buffer.length, the_fixed_length)) {
            read_again->go();
        };
    } Else {
        # Look for a newline in the data.
        explode("\n", unparsed_data, "2") parts;
        value(parts) parts;
        
        # Append the data before the newline to the line buffer.
        parts->get("0") first_part;
        line_buffer->append(first_part);
        
        # Enforce the max-line-len limit.
        If (@num_greater(line_buffer.length, options.max_line_len)) {
            log(@warning, prefix, "Line too long");
            socket->close();
        };
        
        # If no line yet, read again.
        If (@num_equal(parts.length, "1")) {
            read_again->go();
        };
        
        # Prepare for the next line.
        parts->get("1") next_part;
        unparsed_data->set(next_part);
    };
    
    # Expose the line and reset the line_buffer for future parsing.
    value(line_buffer) line;
    line_buffer->reset("");
    
    # Handle CRLF lines - get rid of CR.
    If (@and(@not(parsing_fixed_length), @num_greater(line.length, "0"))) {
        var(@num_subtract(line.length, "1")) len_minus_one;
        line->substr(len_minus_one) last_char;
        If (@val_equal(last_char, "\r")) {
            line->substr("0", len_minus_one) without_cr;
            line->reset(without_cr);
        };
    };
    
    # Pass the line to the request processing task.
    depsc->provide("line");
}

template _http_request_task {
    alias("_caller") client;
    objref(^client.options) options;
    
    # This block acks the current line and requests processing the next line.
    Block {
        alias(@_arg0) parsing_fixed_length;
        alias(@_arg1) the_fixed_length;
        
        var(@true) need_ack;
        backtrack_point() line_acked;
        If (need_ack) {
            need_ack->set(@false);
            client.depsc->depend({"line"}) line_event;
            line_event.parsing_fixed_length->set(parsing_fixed_length);
            line_event.the_fixed_length->set(the_fixed_length);
            line_acked->rgo();
            line_event.line_processed->go();
            if("false");
        };
    } ack_line;
    
    # This block waits for a line and appends it to a value object.
    Block {
        objref_arg(_arg0) append_dest;
        
        var(@true) need_line;
        backtrack_point() got_line;
        If (need_line) {
            need_line->set(@false);
            client.depsc->depend({"line"}) line_event;
            append_dest->append(line_event.line);
            got_line->go();
        };
    } get_line;
    
    # Will backtrack here to proceed to the next request.
    backtrack_point() next_request;
    
    # Request parsing state.
    var(@false) got_first_line;
    var("") request_method;
    var("") request_path;
    var("") request_version_major;
    var("") request_version_minor;
    value([]) request_headers;
    var("0") num_header_lines;
    
    # This block parses and remembers a header.
    Block {
        alias(@_arg0) header_line;
        
        # Enforce the max-headers limit.
        If (@num_greater_equal(num_header_lines, options.max_headers)) {
            log(@warning, client.prefix, "Too many headers");
            client.socket->close();
        };
        
        # Increment the header line counter.
        num_header_lines->set(@num_add(num_header_lines, "1"));
        
        # Split the header into the name and value.
        explode(": ", header_line, "2") header_parts;
        value(header_parts) header_parts;
        If (@num_different(header_parts.length, "2")) {
            log(@warning, client.prefix, "Bad header");
            client.socket->close();
        };
        header_parts->get("0") header_name_orig;
        header_parts->get("1") header_value;
        
        # Uncaseify the header name.
        var(@tolower(header_name_orig)) header_name;
        
        # Check if we already have this header.
        request_headers->try_get(header_name) existing_header;
        If (@not(existing_header.exists)) {
            # Add it as a new header.
            request_headers->insert(header_name, header_value);
        } Else {
            # Append it to the existing header, with a comma.
            existing_header->append(",");
            existing_header->append(header_value);
        };
    } handle_header;
    
    # Will backtrack when the request is read.
    var(@true) reading_request;
    backtrack_point() request_done;
    
    If (reading_request) {
        # Wait for a line.
        client.depsc->depend({"line"}) line_event;
        objref(^line_event.line) line;
        
        # Non-empty or empty line (end of request)?
        If (@num_greater(line.length, "0")) {
            If (@not(got_first_line)) {
                # Split the first line by space into the three parts.
                explode(" ", line, "3") first_row_parts;
                value(first_row_parts) first_row_parts;
                If (@num_different(first_row_parts.length, "3")) {
                    log(@warning, client.prefix, "Bad first line");
                    client.socket->close();
                };
                
                # Fetch those parts.
                first_row_parts->get("0") p0;
                first_row_parts->get("1") p1;
                first_row_parts->get("2") p2;
                
                # Parse the HTTP version.
                explode("/", p2) version_parts;
                value(version_parts) version_parts;
                If (@num_different(version_parts.length, "2")) {
                    log(@warning, client.prefix, "Bad version (/)");
                    client.socket->close();
                };
                version_parts->get("0") version_http;
                version_parts->get("1") version_ver;
                If (@val_different(version_http, "HTTP")) {
                    log(@warning, client.prefix, "Bad version (HTTP)");
                    client.socket->close();
                };
                explode(".", version_ver) ver_numparts;
                value(ver_numparts) ver_numparts;
                If (@val_different(ver_numparts.length, "2")) {
                    log(@warning, client.prefix, "Bad version (.)");
                    client.socket->close();
                };
                ver_numparts->get("0") major;
                parse_number(major) major;
                ver_numparts->get("1") minor;
                parse_number(minor) minor;
                If (@or(@not(major.succeeded), @not(minor.succeeded))) {
                    log(@warning, client.prefix, "Bad version (N)");
                    client.socket->close();
                };
                
                # Remember the first line data.
                request_method->set(p0);
                request_path->set(p1);
                request_version_major->set(major);
                request_version_minor->set(minor);
                got_first_line->set(@true);
            } Else {
                # Handle the header.
                handle_header->call(line);
            };
            
            # Achlowledge line (this immediately causes backtracking to line_event).
            line_event.line_processed->go();
            if("false"); # unreachable
        } Else {
            # Check if we at least got the first line of the request.
            If (@not(got_first_line)) {
                log(@warning, client.prefix, "No lines in request");
                client.socket->close();
            };
            
            # Backtrack to handle the request.
            reading_request->set(@false);
            request_done->go();
        };
    };
    
    log(@notice, client.prefix, "Received request");
    
    # State for the reply to the request.
    var("200 OK") reply_status;
    value({}) reply_headers;
    var("text/plain; charset=utf-8") content_type;
    value("") reply_payload;
    var(@false) close_connection;
    var("0") reply_version_minor;
    
    # Define the callbacks for the request handler.
    If (@true) {
        Block {
            reply_status->set(_arg0);
        } set_status;
        
        Block {
            content_type->set(_arg0);
        } set_content_type;
        
        Block {
            reply_headers->append({_arg0, _arg1});
        } add_header;
        
        Block {
            reply_payload->append(_arg0);
        } add_payload;
        
        Block {
            add_header->call("Connection", "close");
            close_connection->set(@true);
        } connection_close;
    } callbacks;

    # Define some generic responses.
    If (@true) {
        Block {
            var(_arg0) code;
            callbacks.set_status->call(code);
            callbacks.add_payload->call(code);
        } generic_error;
        
        Block {
            generic_error->call("405 Method Not Allowed");
        } method_not_allowed;
        
        Block {
            generic_error->call("501 Not Implemented");
        } not_implemented;
        
        Block {
            generic_error->call("404 Not Found");
        } not_found;
    } responses;
    
    # Check the HTTP version.
    If (@num_different(request_version_major, "1")) {
        # Need to close the connection after response.
        callbacks.connection_close->call();
        responses.generic_error->call("505 HTTP Version Not Supported");
    } Else {
        # Adjust the minor HTTP version of the response.
        If (@num_greater_equal(request_version_minor, "1")) {
            reply_version_minor->set("1");
        };
        
        # Will put any request payload here.
        value("") request_payload;
        var(@false) bad_transfer_encoding;
        var(@false) encoding_handled;
        
        # Check if we have transfer-encoding.
        request_headers->try_get("transfer-encoding") req_te;
        If (req_te.exists) {
            var(@tolower(req_te)) req_low_te;
            If (@val_different(req_low_te, "identity")) {
                # We handle the encoding here and ignore content-length.
                encoding_handled->set(@true);
                
                If (@val_different(req_low_te, "chunked")) {
                    bad_transfer_encoding->set(@true);
                } Else {
                    # Will backtrack here for the next chunk.
                    backtrack_point() next_chunk;
                    
                    # Ack the line, requesting the next (normal) line.
                    ack_line->call(@false, "0");
                    
                    # Wait for the chunk prefix line to arrive.
                    value("") chunk_line;
                    get_line->call(^chunk_line);
                    
                    # Extract the length out of the chunk header (ignoring any chunk-extension).
                    explode(";", chunk_line, "2") chunk_line_parts;
                    value(chunk_line_parts) chunk_line_parts;
                    chunk_line_parts->get("0") chunk_length_str;
                    
                    # Parse the chunk length.
                    parse_hex_number(chunk_length_str) chunk_length;
                    If (@not(chunk_length.succeeded)) {
                        log(@warning, client.prefix, "Bad transfer length prefix");
                        client.socket->close();
                    };
                    
                    # Not last chunk?
                    If (@num_greater(chunk_length, "0")) {
                        # Enforce the payload size limit.
                        If (@num_greater(chunk_length, @num_subtract(options.max_request_payload_len, request_payload.length))) {
                            log(@warning, client.prefix, "Too much payload");
                            client.socket->close();
                        };
                        
                        # Ack the line, requesting fixed length.
                        ack_line->call(@true, chunk_length);
                        
                        # Wait for the chunk to arrive.
                        get_line->call(^request_payload);
                        
                        # Ack the line, requesting a normal line.
                        ack_line->call(@false, "0");
                        
                        # Wait for the stupid CRLF to arrive.
                        value("") chunk_end;
                        get_line->call(^chunk_end);
                        If (@val_different(chunk_end, "")) {
                            log(@warning, client.prefix, "Bad chunk end");
                            client.socket->close();
                        };
                        
                        # Next chunk.
                        next_chunk->go();
                    };
                    
                    # Will backtrack here to read the next trailer line.
                    backtrack_point() next_trailer_line;
                    
                    # Request a normal line.
                    ack_line->call(@false, "0");
                    
                    # Wait for the line.
                    value("") trailer_line;
                    get_line->call(^trailer_line);
                    
                    # Not end of trailer?
                    If (@num_greater(trailer_line.length, "0")) {
                        # Handle the trailer line as a header.
                        handle_header->call(trailer_line);
                        
                        # Expect more trailer lines.
                        next_trailer_line->go();
                    };
                };
            };
        };
        
        If (@not(encoding_handled)) {
            # Check if we have a content-length.
            request_headers->try_get("content-length") req_content_length;
            If (req_content_length.exists) {
                # Parse the length.
                parse_number(req_content_length) length_number;
                If (@not(length_number.succeeded)) {
                    log(@warning, client.prefix, "Bad content-length");
                    client.socket->close();
                };
                
                # Enforce the payload size limit.
                If (@num_greater(length_number, options.max_request_payload_len)) {
                    log(@warning, client.prefix, "Too much payload");
                    client.socket->close();
                };
                
                # Ack the line, requesting a fixed-line of the specified line.
                ack_line->call(@true, length_number);
                
                # Wait for the payload to arrive.
                get_line->call(^request_payload);
            };
        };
        
        # Handle bad transfer encoding.
        If (bad_transfer_encoding) {
            callbacks.connection_close->call();
            responses.not_implemented->call();
        } Else {
            # Check if the user supports this request method.
            options.supported_methods->try_get(request_method) method_entry;
            If (@not(method_entry.exists)) {
                responses.not_implemented->call();
            } Else {
                # Call the user's request handler.
                options.request_handler->call(request_method, request_path, request_headers, request_payload, ^callbacks, ^responses);
            };
        };
    };
    
    # Send the headers.
    If (@true) {
        # First line of response.
        value(@concat("HTTP/1.", reply_version_minor, " ", reply_status, "\r\n")) response;
        
        # Add some basic headers.
        response->append(@concat("Server: ", options.server_name, "\r\n"));
        response->append(@concat("Content-Type: ", content_type, "\r\n"));
        response->append(@concat("Content-Length: ", reply_payload.length, "\r\n"));
        
        # Add all the other headers.
        var("0") i;
        backtrack_point() again;
        If (@num_lesser(i, reply_headers.length)) {
            reply_headers->get(i) header;
            header->get("0") name;
            header->get("1") value;
            response->append(@concat(name, ": ", value, "\r\n"));
            i->set(@num_add(i, "1"));
            again->go();
        };
        
        # Add the empty line.
        response->append("\r\n");
        
        # Send the reponse!
        client.socket->write(response);
    };
    
    # Send the payload!
    client.socket->write(reply_payload);
    
    # Close connection if desired.
    If (close_connection) {
        client.socket->close();
    };
    
    # Ack the line, requesting a normal line.
    ack_line->call(@false, "0");
    
    # Proceed to handle the next request.
    next_request->go();
}
