# Copyright (c) 2015 Ambroz Bizjak
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

include_guard "run_process_output"

template run_process_output {
    alias(@_arg0) command;
    
    # We collect the results here.
    var(@false) succeeded;
    value("") output;
    
    Do {
        # Start child process.
        sys.start_process(command, "r", ["keep_stderr":"true"]) proc;
        If (proc.is_error) {
            _do->break();
        };
        
        # Get read pipe handle.
        proc->read_pipe() read_pipe;
        If (read_pipe.is_error) {
            _do->break();
        };
        
        # Read all contents.
        backtrack_point() read_again;
        read_pipe->read() read;
        If (read.not_eof) {
            output->append(read);
            read_again->go();
        };
        
        # Wait for the process to terminate.
        proc->wait() wait;
        val_different(wait.exit_status, "0") not_ok;
        If (not_ok) {
            _do->break();
        };
        
        # Assume success.
        succeeded->set(@true);
    };
}
