# Copyright (c) 2015 Ambroz Bizjak
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

include_guard "aprinter_compile_service"

include "http_server.ncdi"
include "job_queue.ncdi"
include "run_process_inout.ncdi"
include "temp_dir.ncdi"

template aprinter_compile_service {
    value(_arg0) config;
    
    log_fr(@notice, {"APrinter Compile Service Init"}, {"APrinter Compile Service Exit"});
    
    # Fetch stuff out of the configuration.
    config->get("http_server") http_server_config;
    config->get("max_concurrent_compiles") max_concurrent_compiles;
    config->get("aprinter_src_dir") aprinter_src_dir;
    config->get("temp_dir") temp_dir;
    config->get("stderr_truncate_bytes") stderr_truncate_bytes;
    config->get("service_prefix") service_prefix;
    config->get("mktemp") mktemp;
    config->get("rm") rm;
    config->get("python") python;
    config->get("nixbuild") nixbuild;
    config->get("7za") p7za;
    config->get("mkdir") mkdir;
    config->get("rsync") rsync;
    config->get("bash") bash;
    config->get("head") head;
    config->get("cat") cat;
    
    # Init the queue.
    call(@job_queue, {max_concurrent_compiles}) queue;
    
    # Request paths.
    var(@concat(service_prefix, "/")) root_path;
    var(@concat(service_prefix, "/compile")) compile_path;
    
    # Define the HTTP request handler.
    Block {
        alias(@_arg0) method;
        alias(@_arg1) path;
        alias(@_arg2) headers;
        alias(@_arg3) request_payload;
        objref_arg(_arg4) callbacks;
        objref_arg(_arg5) responses;
        
        Do {
            # Provide some warm and fuzzy text at /.
            If (@val_equal(path, root_path)) {
                If (@not(@val_equal(method, "GET"))) {
                    responses.method_not_allowed->call();
                    _do->break();
                };
                
                value("") text;
                text->append("Hello curious user! You have reached the APrinter Compilation Service Backend.\n\n");
                text->append("Unfortunately there is nothing here to see.\n\n");
                text->append("Unless you are interested in hot new programming languages.\n");
                text->append("In that case you really should take a look at the source code of this software, ");
                text->append("which is written in the NCD Programming Language :)");
                
                callbacks.add_payload->call(text);
                _do->break();
            };
            
            # Unsupported request path?
            If (@not(@val_equal(path, compile_path))) {
                responses.not_found->call();
                _do->break();
            };
            
            # Here we only support POST.
            If (@val_different(method, "POST")) {
                responses.method_not_allowed->call();
                _do->break();
            };
            
            callbacks.log->call(@notice, "compile request");
                
            # Wait in the queue until we're allowed to do the compilation.
            call(@job_queue_request, {^queue});
            
            callbacks.log->call(@notice, "compile started");
            
            # Create a temporary directory.
            call(@temp_dir, {^callbacks.log, temp_dir, mktemp, rm}) temp_dir;
            If (@not(temp_dir.succeeded)) {
                responses.internal_error->call();
                _do->break();
            };
            
            # Run the perform_build script.
            concat(aprinter_src_dir, "/config_system/service/perform_build.py") perform_build_path;
            var({
                python, "-B", perform_build_path,
                "--aprinter-src-dir", aprinter_src_dir,
                "--request-file", "-",
                "--response-file", "-",
                "--temp-dir", temp_dir.created_dir,
                "--stderr-truncate-bytes", stderr_truncate_bytes,
                "--python", python,
                "--nix-build", nixbuild,
                "--mkdir", mkdir,
                "--rsync", rsync,
                "--p7za", p7za,
                "--bash", bash,
                "--head", head,
                "--cat", cat
            }) perform_build_cmd;
            call(@run_process_inout, {perform_build_cmd, request_payload}) perform_build_exec;
            If (@not(perform_build_exec.succeeded)) {
                responses.internal_error->call();
                _do->break();
            };
            
            # Send the reply.
            callbacks.set_content_type->call("application/json");
            callbacks.add_payload->call(perform_build_exec.output);
            
            callbacks.log->call(@notice, "build finished");
        };
    } request_handler;
    
    # Start the HTTP server.
    call(@http_server, {http_server_config, ^request_handler});
}
