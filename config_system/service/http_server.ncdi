include_guard "http_server"

template http_server {
    value(_arg0) options_map;
    objref_arg(_arg1) request_handler;
    
    # Prepare options for consumption.
    If (@true) {
        options_map->get("listen_addr") listen_addr;
        options_map->get("max_clients") max_clients;
        options_map->get("max_headers") max_headers;
        options_map->get("max_line_len") max_line_len;
        options_map->get("max_request_payload_len") max_request_payload_len;
        options_map->get("inactivity_timeout") inactivity_timeout;
        options_map->get("server_name") server_name;
    } options;
    
    # Precompute search strings.
    If (@true) {
        compile_search("\n") search_newline;
        compile_search(": ") search_colsp;
        compile_search(" ") search_space;
        compile_search("/") search_slash;
        compile_search(".") search_dot;
        compile_search(";") search_semicolon;
    } precomp;
    
    # Supported methods.
    value(["GET": "", "POST": ""]) supported_methods;
    
    # This is the list of connected clients.
    # We use it to enforce the max-clients limit.
    value({}) clients;
    
    # Reference point for the global stuff.
    refhere() global;
    
    # Set up the TCP listener.
    sys.listen({@tcp, options.listen_addr}, @_http_client_proc, {});
}

template _http_client_proc {
    objref(^_caller.global) global;
    alias(@_socket) socket;
    
    # Fetch the client address.
    var(socket.client_addr) client_addr;
    
    # Prefix for log messages.
    var(@concat(@encode_value(socket.client_addr), ": ")) prefix;
    
    # Informational messages for client connect/disconnect.
    log_fr(@notice, {prefix, "Connected"}, {prefix, "Disconnected"});
    
    # Block for logging.
    Block {
        log(_arg0, prefix, _arg1);
    } log;
    
    # Enforce the max-clients limit.
    If (@num_greater_equal(global.clients.length, global.options.max_clients)) {
        log->call(@warning, "Too many clients");
        socket->close();
    };
    
    # Keep track of all connected clients.
    global.clients->insert_undo(["addr": client_addr]);
    
    # Depend scope for communication between tasks.
    depend_scope() depsc;
    
    # Blocker for resetting the timeout.
    blocker(@true) timeout_blk;
    
    # Block for logging a message and disconnecting the client.
    Block {
        log->call(_arg0, _arg1);
        socket->close();
    } err_disconnect;
    
    # Reference point for the client-specific stuff.
    refhere() client;
    
    # Start the various client-specific tasks.
    process_manager() mgr;
    mgr->start(@_http_timeout_task, {});
    mgr->start(@_http_parse_task, {});
    mgr->start(@_http_request_task, {});
}

template _http_timeout_task {
    objref(^_caller.client) client;
    
    # Will backtrack here when the timeout needs to be reset.
    client.timeout_blk->use();
    
    # Wait for the timeout to expire.
    sleep(client.global.options.inactivity_timeout);
    
    # Disconnect the client.
    client.err_disconnect->call(@warning, "Timed out");
}

template _http_parse_task {
    objref(^_caller.client) client;
    objref(^client.global) global;
    objref(^global.precomp) precomp;
    
    # Line splitting buffer.
    value("") line_buffer;
    
    # Current parsing mode (line or fixed-length).
    var(@false) parsing_fixed_length;
    var("0") the_fixed_length;
    
    # Will backtrack here to read from socket again.
    backtrack_point() read_again;
    
    # Read some data from the socket.
    client.socket->read() read_data;
    If (read_data.eof) {
        client.socket->close();
    };
    
    # This holds the unparsed data. Will reduce it as we parse lines.
    var(read_data) unparsed_data;
    
    # Will backtrack here to look for more lines.
    backtrack_point() line_processed;
    
    If (parsing_fixed_length) {
        # Calculate how much more data we want.
        var(@num_subtract(the_fixed_length, line_buffer.length)) remaining;
        
        # Append no more than the remaining amount to the line_buffer.
        substr(unparsed_data, "0", remaining) new_data;
        value(new_data) new_data;
        line_buffer->append(new_data);
        
        # Remove this data from the unparsed_data.
        substr(unparsed_data, new_data.length) rem_data;
        unparsed_data->set(rem_data);
        
        # If not enough data yet, read again.
        If (@num_lesser(line_buffer.length, the_fixed_length)) {
            read_again->go();
        };
    } Else {
        # Look for a newline in the data.
        precomp.search_newline->explode(unparsed_data, "2") parts;
        value(parts) parts;
        
        # Append the data before the newline to the line buffer.
        parts->get("0") first_part;
        line_buffer->append(first_part);
        
        # Enforce the max-line-len limit.
        If (@num_greater(line_buffer.length, global.options.max_line_len)) {
            client.err_disconnect->call(@warning, "Line too long");
        };
        
        # If no line yet, read again.
        If (@num_equal(parts.length, "1")) {
            read_again->go();
        };
        
        # Prepare for the next line.
        parts->get("1") next_part;
        unparsed_data->set(next_part);
    };
    
    # Expose the line and reset the line_buffer for future parsing.
    value(line_buffer) line;
    line_buffer->reset("");
    
    # Handle CRLF lines - get rid of CR.
    If (@and(@not(parsing_fixed_length), @num_greater(line.length, "0"))) {
        var(@num_subtract(line.length, "1")) len_minus_one;
        line->substr(len_minus_one) last_char;
        If (@val_equal(last_char, "\r")) {
            line->substr("0", len_minus_one) without_cr;
            line->reset(without_cr);
        };
    };
    
    # Pass the line to the request processing task.
    client.depsc->provide("line");
}

template _http_request_task {
    objref(^_caller.client) client;
    objref(^client.global) global;
    objref(^global.precomp) precomp;
    objref(^global.options) options;
    
    # This block acks the current line and requests processing the next line.
    Block {
        alias(@_arg0) parsing_fixed_length;
        alias(@_arg1) the_fixed_length;
        
        Do {
            client.depsc->depend({"line"}) line_event;
            line_event.parsing_fixed_length->set(parsing_fixed_length);
            line_event.the_fixed_length->set(the_fixed_length);
            _do->rbreak();
            line_event.line_processed->go();
            if(@false);
        };
    } ack_line;
    
    # This block waits for a line and appends it to a value object.
    Block {
        objref_arg(_arg0) append_dest;
        
        Do {
            client.depsc->depend({"line"}) line_event;
            append_dest->append(line_event.line);
        };
    } get_line;
    
    # Will backtrack here to proceed to the next request.
    backtrack_point() next_request;
    
    # Request parsing state.
    var(@false) got_first_line;
    var("") request_method;
    var("") request_path;
    var("") request_version_major;
    var("") request_version_minor;
    value([]) request_headers;
    var("0") num_header_lines;
    
    # This block parses and remembers a header.
    Block {
        alias(@_arg0) header_line;
        
        # Enforce the max-headers limit.
        If (@num_greater_equal(num_header_lines, options.max_headers)) {
            client.err_disconnect->call(@warning, "Too many headers");
        };
        
        # Increment the header line counter.
        num_header_lines->set(@num_add(num_header_lines, "1"));
        
        # Split the header into the name and value.
        precomp.search_colsp->explode(header_line, "2") header_parts;
        value(header_parts) header_parts;
        If (@num_different(header_parts.length, "2")) {
            client.err_disconnect->call(@warning, "Bad header");
        };
        header_parts->get("0") header_name_orig;
        header_parts->get("1") header_value;
        
        # Uncaseify the header name.
        var(@tolower(header_name_orig)) header_name;
        
        # Check if we already have this header.
        request_headers->try_get(header_name) existing_header;
        If (@not(existing_header.exists)) {
            # Add it as a new header.
            request_headers->insert(header_name, header_value);
        } Else {
            # Append it to the existing header, with a comma.
            existing_header->append(",");
            existing_header->append(header_value);
        };
    } handle_header;
    
    Do {
        # Wait for a line.
        client.depsc->depend({"line"}) line_event;
        objref(^line_event.line) line;
        
        # Non-empty or empty line (end of request)?
        If (@num_greater(line.length, "0")) {
            If (@not(got_first_line)) {
                # Split the first line by space into the three parts.
                precomp.search_space->explode(line, "3") first_row_parts;
                value(first_row_parts) first_row_parts;
                If (@num_different(first_row_parts.length, "3")) {
                    client.err_disconnect->call(@warning, "Bad first line");
                };
                
                # Fetch those parts.
                first_row_parts->get("0") p0;
                first_row_parts->get("1") p1;
                first_row_parts->get("2") p2;
                
                # Parse the HTTP version.
                precomp.search_slash->explode(p2, "2") version_parts;
                value(version_parts) version_parts;
                If (@num_different(version_parts.length, "2")) {
                    client.err_disconnect->call(@warning, "Bad version (/)");
                };
                version_parts->get("0") version_http;
                version_parts->get("1") version_ver;
                If (@val_different(version_http, "HTTP")) {
                    client.err_disconnect->call(@warning, "Bad version (HTTP)");
                };
                precomp.search_dot->explode(version_ver, "2") ver_numparts;
                value(ver_numparts) ver_numparts;
                If (@num_different(ver_numparts.length, "2")) {
                    client.err_disconnect->call(@warning, "Bad version (.)");
                };
                ver_numparts->get("0") major;
                parse_number(major) major;
                ver_numparts->get("1") minor;
                parse_number(minor) minor;
                If (@or(@not(major.succeeded), @not(minor.succeeded))) {
                    client.err_disconnect->call(@warning, "Bad version (N)");
                };
                
                # Remember the first line data.
                request_method->set(p0);
                request_path->set(p1);
                request_version_major->set(major);
                request_version_minor->set(minor);
                got_first_line->set(@true);
            } Else {
                # Handle the header.
                handle_header->call(line);
            };
            
            # Achlowledge line (this immediately causes backtracking to line_event).
            line_event.line_processed->go();
            if(@false); # unreachable
        };
        
        # Check if we at least got the first line of the request.
        If (@not(got_first_line)) {
            client.err_disconnect->call(@warning, "No lines in request");
        };
    };
    
    client.log->call(@notice, "Received request");
    
    # State for the reply to the request.
    var("200 OK") reply_status;
    value({}) reply_headers;
    var("text/plain; charset=utf-8") content_type;
    value("") reply_payload;
    var(@false) close_connection;
    var("0") reply_version_minor;
    
    # Define the callbacks for the request handler.
    If (@true) {
        Block {
            reply_status->set(_arg0);
        } set_status;
        
        Block {
            content_type->set(_arg0);
        } set_content_type;
        
        Block {
            reply_headers->append({_arg0, _arg1});
        } add_header;
        
        Block {
            reply_payload->append(_arg0);
        } add_payload;
        
        Block {
            add_header->call("Connection", "close");
            close_connection->set(@true);
        } connection_close;
        
        objref(^client.log) log;
    } callbacks;

    # Define some generic responses.
    If (@true) {
        Block {
            var(_arg0) code;
            callbacks.set_status->call(code);
            callbacks.add_payload->call(code);
        } generic_error;
        
        Block {
            generic_error->call("405 Method Not Allowed");
        } method_not_allowed;
        
        Block {
            generic_error->call("501 Not Implemented");
        } not_implemented;
        
        Block {
            generic_error->call("404 Not Found");
        } not_found;
        
        Block {
            generic_error->call("500 Internal Server Error");
        } internal_error;
    } responses;
    
    Do {
        # Check the HTTP version.
        If (@num_different(request_version_major, "1")) {
            # Need to close the connection after response.
            callbacks.connection_close->call();
            responses.generic_error->call("505 HTTP Version Not Supported");
            _do->break();
        };
        
        # Adjust the minor HTTP version of the response.
        If (@num_greater_equal(request_version_minor, "1")) {
            reply_version_minor->set("1");
        };
        
        # We will be determing the presence and encoding of the payload.
        var("none") payload_kind;
        var(@false) payload_error;
        var("") payload_fixed_length;
        
        # Is it chunked?
        request_headers->try_get("transfer-encoding") req_te;
        If (req_te.exists) {
            var(@tolower(req_te)) req_low_te;
            If (@val_different(req_low_te, "identity")) {
                If (@val_equal(req_low_te, "chunked")) {
                    payload_kind->set("chunked");
                } Else {
                    payload_error->set(@true);
                };
            };
        };
        
        # Is it fixed-length?
        If (@and(@not(payload_error), @val_equal(payload_kind, "none"))) {
            request_headers->try_get("content-length") req_content_length;
            If (req_content_length.exists) {
                parse_number(req_content_length) length_number;
                If (@not(length_number.succeeded)) {
                    client.err_disconnect->call(@warning, "Bad content-length");
                };
                payload_kind->set("fixed-length");
                payload_fixed_length->set(length_number);
            };
        };
        
        # Check the Expect header and determine if 100 Continue should be sent.
        var(@false) continue_needed;
        request_headers->try_get("expect") req_expect;
        If (req_expect.exists) {
            var(@tolower(req_expect)) req_expect_low;
            If (@val_different(req_expect_low, "100-continue")) {
                callbacks.connection_close->call();
                responses.generic_error->call("417 Expectation Failed");
                _do->break();
            };
            
            If (@val_different(payload_kind, "none")) {
                continue_needed->set(@true);
            };
        };
        
        # Start sending 100 Continue, if warranted.
        spawn(@_http_continue_task, {}) continue_task;
        
        # Will put any received request payload here.
        value("") request_payload;
        
        # Receive the payload if any.
        If (@val_equal(payload_kind, "fixed-length")) {
            # Enforce the payload size limit.
            If (@num_greater(payload_fixed_length, options.max_request_payload_len)) {
                client.err_disconnect->call(@warning, "Too much payload");
            };
            
            # Ack the line, requesting a fixed-line of the specified line.
            ack_line->call(@true, payload_fixed_length);
            
            # Wait for the payload to arrive.
            get_line->call(^request_payload);
        }
        Elif (@val_equal(payload_kind, "chunked")) {
            # Will backtrack here for the next chunk.
            backtrack_point() next_chunk;
            
            # Ack the line, requesting the next (normal) line.
            ack_line->call(@false, "0");
            
            # Wait for the chunk prefix line to arrive.
            value("") chunk_line;
            get_line->call(^chunk_line);
            
            # Extract the length out of the chunk header (ignoring any chunk-extension).
            precomp.search_semicolon->explode(chunk_line, "2") chunk_line_parts;
            value(chunk_line_parts) chunk_line_parts;
            chunk_line_parts->get("0") chunk_length_str;
            
            # Parse the chunk length.
            parse_hex_number(chunk_length_str) chunk_length;
            If (@not(chunk_length.succeeded)) {
                client.err_disconnect->call(@warning, "Bad transfer length prefix");
            };
            
            # Not last chunk?
            If (@num_greater(chunk_length, "0")) {
                # Enforce the payload size limit.
                If (@num_greater(chunk_length, @num_subtract(options.max_request_payload_len, request_payload.length))) {
                    client.err_disconnect->call(@warning, "Too much payload");
                };
                
                # Ack the line, requesting fixed length.
                ack_line->call(@true, chunk_length);
                
                # Wait for the chunk to arrive.
                get_line->call(^request_payload);
                
                # Ack the line, requesting a normal line.
                ack_line->call(@false, "0");
                
                # Wait for the stupid CRLF to arrive.
                value("") chunk_end;
                get_line->call(^chunk_end);
                If (@val_different(chunk_end, "")) {
                    client.err_disconnect->call(@warning, "Bad chunk end");
                };
                
                # Next chunk.
                next_chunk->go();
            };
            
            # Will backtrack here to read the next trailer line.
            backtrack_point() next_trailer_line;
            
            # Request a normal line.
            ack_line->call(@false, "0");
            
            # Wait for the line.
            value("") trailer_line;
            get_line->call(^trailer_line);
            
            # Not end of trailer?
            If (@num_greater(trailer_line.length, "0")) {
                # Handle the trailer line as a header.
                handle_header->call(trailer_line);
                
                # Expect more trailer lines.
                next_trailer_line->go();
            };
        };
        
        # Wait for continue sending to complete.
        continue_task->join();
        
        # Handle bad transfer encoding.
        If (payload_error) {
            callbacks.connection_close->call();
            responses.not_implemented->call();
            _do->break();
        };
        
        # Check if the request method is supported.
        global.supported_methods->try_get(request_method) method_entry;
        If (@not(method_entry.exists)) {
            responses.not_implemented->call();
            _do->break();
        };
        
        # Call the user's request handler.
        options.request_handler->call(request_method, request_path, request_headers, request_payload, ^callbacks, ^responses);
    };
    
    # Reset the inactivity timeout.
    client.timeout_blk->downup();
    
    # First line of response.
    value(@concat("HTTP/1.", reply_version_minor, " ", reply_status, "\r\n")) response;
    
    # Add some basic headers.
    response->append(@concat("Server: ", options.server_name, "\r\n"));
    response->append(@concat("Content-Type: ", content_type, "\r\n"));
    response->append(@concat("Content-Length: ", reply_payload.length, "\r\n"));
    
    # Add all the other headers.
    var("0") i;
    backtrack_point() again;
    If (@num_lesser(i, reply_headers.length)) {
        reply_headers->get(i) header;
        header->get("0") name;
        header->get("1") value;
        response->append(@concat(name, ": ", value, "\r\n"));
        i->set(@num_add(i, "1"));
        again->go();
    };
    
    # Add the empty line.
    response->append("\r\n");
    
    # Send the reponse!
    client.socket->write(response);
    
    # Send the payload!
    client.socket->write(reply_payload);
    
    # Close connection if we want to.
    If (close_connection) {
        client.socket->close();
    };
    
    # Ack the line, requesting a normal line.
    ack_line->call(@false, "0");
    
    # Proceed to handle the next request.
    next_request->go();
}

template _http_continue_task {
    If (_caller.continue_needed) {
        _caller.client.socket->write(@concat("HTTP/1.", _caller.reply_version_minor, " 100 Continue\r\n\r\n"));
    };
}
