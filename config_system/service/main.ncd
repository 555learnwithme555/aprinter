include "http_server.ncdi"
include "job_queue.ncdi"
include "run_process_output.ncdi"
include "run_process_inout.ncdi"
include "temp_dir.ncdi"

process main {
    log_fr(@notice, {"Init"}, {"Exit"});
    
    # Read the configuration.
    getargs() args;
    value(args) args;
    args->get("0") config_path;
    file_read(config_path) config_contents;
    parse_value(config_contents) config;
    value(config) config;
    
    # Fetch stuff out of the configuration.
    config->get("http_server") http_server_config;
    config->get("max_concurrent_compiles") max_concurrent_compiles;
    config->get("aprinter_src_dir") aprinter_src_dir;
    config->get("temp_dir") temp_dir;
    config->get("mktemp") mktemp;
    config->get("rm") rm;
    config->get("sh") sh;
    config->get("cat") cat;
    config->get("python") python;
    
    # Init the queue.
    call(@job_queue, {max_concurrent_compiles}) queue;
    
    # Define the HTTP request handler.
    Block {
        alias(@_arg0) method;
        alias(@_arg1) path;
        alias(@_arg2) headers;
        alias(@_arg3) request_payload;
        objref_arg(_arg4) callbacks;
        objref_arg(_arg5) responses;
        
        Do {
            # Provide some warm and fuzzy text at /.
            If (@val_equal(path, "/")) {
                If (@not(@val_equal(method, "GET"))) {
                    responses.method_not_allowed->call();
                    _do->break();
                };
                
                value("") text;
                text->append("Hello curious user! You have reached the APrinter Compilation Service Backend.\n\n");
                text->append("Unfortunately there is nothing here to see.\n\n");
                text->append("Unless you are interested in hot new programming languages.\n");
                text->append("In that case you really should take a look at the source code of this software, ");
                text->append("which is written in the NCD Programming Language :)");
                
                callbacks.add_payload->call(text);
                _do->break();
            };
            
            # Unsupported request path?
            If (@not(@val_equal(path, "/compile"))) {
                responses.not_found->call();
                _do->break();
            };
            
            # Here we only support POST.
            If (@val_different(method, "POST")) {
                responses.method_not_allowed->call();
                _do->break();
            };
            
            callbacks.log->call(@notice, "compile request");
                
            # Wait in the queue until we're allowed to do the compilation.
            call(@job_queue_request, {^queue});
            
            callbacks.log->call(@notice, "compile started");
            
            # Create a temporary directory.
            call(@temp_dir, {^callbacks.log, temp_dir, mktemp, rm}) temp_dir;
            If (@not(temp_dir.succeeded)) {
                responses.internal_error->call();
                _do->break();
            };
            
            # Build the command for the generate script.
            concat(aprinter_src_dir, "/config_system/generator/generate.py") generate_path;
            var({python, "-B", generate_path, "--config", "-", "--output", "-", "--nix"}) generate_cmd;
            
            println("CALL");
            
            # Call the generate script.
            call(@run_process_inout, {generate_cmd, request_payload}) generate_exec;
            
            println(generate_exec.succeeded);
            println(generate_exec.output);
            
            # TBD ...
            
            callbacks.log->call(@notice, "compile finished");
        };
    } request_handler;
    
    # Start the HTTP server.
    call(@http_server, {http_server_config, ^request_handler});
}
